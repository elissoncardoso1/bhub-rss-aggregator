// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feed {
  id            BigInt    @id @default(autoincrement())
  name          String
  journalName   String
  feedUrl       String    @unique
  feedType      FeedType  @default(RSS)
  country       String?   // e.g., "BR"
  language      String?   @default("pt-BR")
  isActive      Boolean   @default(true)
  lastSyncAt    DateTime?
  syncFrequency Int       @default(3600) // seconds
  errorCount    Int       @default(0)
  lastError     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]

  @@index([isActive])
  @@index([lastSyncAt])
}

enum FeedType {
  RSS
  RSS2
  ATOM
}

model Category {
  id          BigInt    @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  color       String    @default("#3B82F6")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Article {
  id              BigInt          @id @default(autoincrement())
  feedId          BigInt
  externalId      String?
  title           String
  abstract        String?
  authorsRaw      String?         // JSON string
  keywordsRaw     String?         // JSON string
  doi             String?
  publicationDate DateTime?
  originalUrl     String?
  feedEntryDate   DateTime?
  localFilePath   String?
  categoryId      BigInt?
  isArchived      Boolean         @default(false)
  viewCount       Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  feed     Feed              @relation(fields: [feedId], references: [id])
  category Category?         @relation(fields: [categoryId], references: [id])
  authors  ArticleAuthor[]

  @@unique([feedId, externalId])
  @@index([publicationDate])
  @@index([feedId])
  @@index([isArchived])
}

model Author {
  id             BigInt          @id @default(autoincrement())
  name           String
  normalizedName String?
  articleCount   Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  articles       ArticleAuthor[]

  @@unique([normalizedName])
  @@index([normalizedName])
}

model ArticleAuthor {
  articleId   BigInt
  authorId    BigInt
  authorOrder Int     @default(1)
  article     Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author      Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@id([articleId, authorId])
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
