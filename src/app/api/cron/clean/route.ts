import { NextRequest, NextResponse } from "next/server"
// import { cleanRepository } from "@/src/jobs/cleanRepository" // DESABILITADO
import { apiSuccess, apiError } from "@/src/lib/api-auth"

/**
 * POST /api/cron/clean - Endpoint para cron externo (DESABILITADO)
 * 
 * NOTA: Sistema configurado como REPOSIT√ìRIO DE CONSULTA
 * - Artigos antigos s√£o preservados para consulta hist√≥rica
 * - N√£o h√° limpeza autom√°tica de conte√∫do
 * - Foco em preservar o acervo cient√≠fico
 */
export async function POST(request: NextRequest) {
  try {
    // Verifica√ß√£o b√°sica de seguran√ßa (opcional)
    const cronSecret = request.headers.get("x-cron-secret")
    if (process.env.CRON_SECRET && cronSecret !== process.env.CRON_SECRET) {
      return apiError("Acesso negado", 401)
    }

    console.log("üßπ Endpoint de limpeza chamado (DESABILITADO - Sistema de consulta)")

    // Retorna informa√ß√£o sobre o sistema de consulta
    return apiSuccess({
      status: "disabled",
      reason: "Sistema configurado como reposit√≥rio de consulta",
      message: "Artigos antigos s√£o preservados para consulta hist√≥rica",
      executedAt: new Date().toISOString(),
      source: "external-cron",
      recommendation: "Use /api/cron/sync para sincroniza√ß√£o de feeds"
    }, `Sistema de limpeza desabilitado - Foco em preservar o acervo cient√≠fico`)

  } catch (error: any) {
    console.error("‚ùå Erro no endpoint de limpeza:", error)
    return apiError("Erro no endpoint de limpeza", 500)
  }
}
