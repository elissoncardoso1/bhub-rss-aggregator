#!/usr/bin/env tsx

import { initializeEmbeddings, embeddingClassifier, classifyArticle } from '../src/lib/ml'

/**
 * Script para testar detalhadamente o sistema de classifica√ß√£o
 */
async function testDetailedClassification() {
  console.log('üß™ Teste Detalhado do Sistema de Classifica√ß√£o\n')

  try {
    // 1. Inicializa o sistema
    console.log('1Ô∏è‚É£ Inicializando sistema de embeddings...')
    await initializeEmbeddings()
    console.log('‚úÖ Sistema inicializado com sucesso!\n')

    // 2. Testes espec√≠ficos de An√°lise do Comportamento
    console.log('2Ô∏è‚É£ Testando classifica√ß√£o de artigos de An√°lise do Comportamento...\n')

    const testArticles = [
      {
        title: 'An√°lise Experimental do Comportamento (EAB)',
        abstract: 'Investiga√ß√£o sobre os princ√≠pios fundamentais da an√°lise experimental do comportamento, incluindo refor√ßamento, puni√ß√£o e extin√ß√£o em contextos laboratoriais controlados.',
        keywords: ['EAB', 'experimental', 'refor√ßamento', 'puni√ß√£o', 'extin√ß√£o'],
        expectedCategory: 'Pesquisa'
      },
      {
        title: 'Terapia ABA para Crian√ßas com TEA',
        abstract: 'Aplica√ß√£o da An√°lise do Comportamento Aplicada (ABA) no tratamento de crian√ßas com Transtorno do Espectro Autista, focando no desenvolvimento de habilidades sociais e comunicativas.',
        keywords: ['ABA', 'TEA', 'autismo', 'terapia', 'habilidades sociais'],
        expectedCategory: 'Cl√≠nica'
      },
      {
        title: 'Programas de Educa√ß√£o Especial Baseados em ABA',
        abstract: 'Desenvolvimento e implementa√ß√£o de programas educacionais para crian√ßas com necessidades especiais, utilizando princ√≠pios da an√°lise do comportamento aplicada.',
        keywords: ['educa√ß√£o especial', 'ABA', 'programas educacionais', 'necessidades especiais'],
        expectedCategory: 'Educa√ß√£o'
      },
      {
        title: 'Gest√£o de Comportamento em Organiza√ß√µes',
        abstract: 'Aplica√ß√£o dos princ√≠pios da an√°lise do comportamento organizacional para melhorar a produtividade e o clima organizacional em empresas.',
        keywords: ['comportamento organizacional', 'gest√£o', 'produtividade', 'clima organizacional'],
        expectedCategory: 'Organizacional'
      },
      {
        title: 'Metodologia de Pesquisa em An√°lise do Comportamento',
        abstract: 'Revis√£o sistem√°tica dos m√©todos de pesquisa utilizados em estudos de an√°lise do comportamento, incluindo design de experimentos e an√°lise de dados.',
        keywords: ['metodologia', 'pesquisa', 'an√°lise do comportamento', 'design experimental'],
        expectedCategory: 'Pesquisa'
      },
      {
        title: 'Interven√ß√µes Comportamentais em Sa√∫de Mental',
        abstract: 'Aplica√ß√£o de t√©cnicas comportamentais no tratamento de transtornos de sa√∫de mental, incluindo ansiedade, depress√£o e transtornos de personalidade.',
        keywords: ['interven√ß√µes comportamentais', 'sa√∫de mental', 'transtornos', 'tratamento'],
        expectedCategory: 'Cl√≠nica'
      },
      {
        title: 'An√°lise do Comportamento em Contextos Educacionais',
        abstract: 'Implementa√ß√£o de estrat√©gias baseadas em an√°lise do comportamento para melhorar o desempenho acad√™mico e comportamental de estudantes.',
        keywords: ['an√°lise do comportamento', 'educa√ß√£o', 'desempenho acad√™mico', 'estudantes'],
        expectedCategory: 'Educa√ß√£o'
      },
      {
        title: 'Sistemas de Refor√ßamento em Empresas',
        abstract: 'An√°lise e implementa√ß√£o de sistemas de refor√ßamento para aumentar a motiva√ß√£o e produtividade dos funcion√°rios em ambientes corporativos.',
        keywords: ['sistemas de refor√ßamento', 'motiva√ß√£o', 'produtividade', 'funcion√°rios'],
        expectedCategory: 'Organizacional'
      }
    ]

    let correctClassifications = 0
    let totalClassifications = 0

    for (let i = 0; i < testArticles.length; i++) {
      const article = testArticles[i]
      console.log(`üìÑ Teste ${i + 1}: ${article.title}`)
      console.log(`   üìù Resumo: ${article.abstract.substring(0, 80)}...`)
      console.log(`   üéØ Categoria Esperada: ${article.expectedCategory}`)
      
      try {
        const classification = await classifyArticle(
          article.title,
          article.abstract,
          article.keywords
        )

        if (classification) {
          console.log(`   üè∑Ô∏è  Categoria Classificada: ${classification.category}`)
          console.log(`   üìä Confian√ßa: ${(classification.confidence * 100).toFixed(1)}%`)
          
          // Verifica se a classifica√ß√£o est√° correta
          const isCorrect = classification.category === article.expectedCategory
          if (isCorrect) {
            console.log(`   ‚úÖ CORRETO!`)
            correctClassifications++
          } else {
            console.log(`   ‚ùå INCORRETO - Esperado: ${article.expectedCategory}`)
          }
          
          totalClassifications++

          if (classification.alternativeCategories && classification.alternativeCategories.length > 0) {
            console.log(`   üîÑ Alternativas:`)
            classification.alternativeCategories.forEach(alt => {
              console.log(`      - ${alt.category}: ${(alt.confidence * 100).toFixed(1)}%`)
            })
          }
        } else {
          console.log(`   ‚ùå Sem categoria espec√≠fica`)
        }
        
        console.log('')

      } catch (error) {
        console.log(`   üí• Erro: ${error instanceof Error ? error.message : String(error)}\n`)
      }
    }

    // 3. Estat√≠sticas do teste
    console.log('3Ô∏è‚É£ Estat√≠sticas do Teste:')
    console.log(`   üìä Total de Testes: ${totalClassifications}`)
    console.log(`   ‚úÖ Classifica√ß√µes Corretas: ${correctClassifications}`)
    console.log(`   ‚ùå Classifica√ß√µes Incorretas: ${totalClassifications - correctClassifications}`)
    console.log(`   üéØ Taxa de Acerto: ${totalClassifications > 0 ? ((correctClassifications / totalClassifications) * 100).toFixed(1) : 0}%`)

    // 4. Informa√ß√µes do sistema
    console.log('\n4Ô∏è‚É£ Informa√ß√µes do Sistema:')
    const systemInfo = embeddingClassifier.getSystemInfo()
    console.log(`   ü§ñ Sistema pronto: ${systemInfo.isReady ? 'Sim' : 'N√£o'}`)
    console.log(`   üìä Threshold de fallback: ${systemInfo.fallbackThreshold}`)
    console.log(`   üß† Modelo: ${systemInfo.embeddingInfo.name}`)
    console.log(`   üìö Categorias: ${systemInfo.embeddingInfo.categoriesCount}`)

    console.log('\nüéâ Teste detalhado conclu√≠do!')

  } catch (error) {
    console.error('üí• Erro durante o teste:', error)
    process.exit(1)
  }
}

// Executa o teste
testDetailedClassification()
