import { PrismaClient } from '@prisma/client'
import { FeedAggregatorService } from '../src/lib/rss/FeedAggregatorService'

const prisma = new PrismaClient()

async function forceSyncFeeds() {
  try {
    console.log('üîÑ For√ßando sincroniza√ß√£o de todos os feeds...')
    console.log('')

    // Buscar todos os feeds ativos
    const activeFeeds = await prisma.feed.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        feedUrl: true,
        lastSyncAt: true
      },
      orderBy: { name: 'asc' }
    })

    console.log(`üì° Encontrados ${activeFeeds.length} feeds ativos`)
    console.log('')

    const aggregator = new FeedAggregatorService()
    let totalArticles = 0
    let successCount = 0
    let errorCount = 0

    for (const feed of activeFeeds) {
      try {
        console.log(`üîÑ Sincronizando: ${feed.name}`)
        console.log(`   URL: ${feed.feedUrl}`)
        console.log(`   √öltimo sync: ${feed.lastSyncAt ? feed.lastSyncAt.toLocaleString('pt-BR') : 'NUNCA'}`)
        
        const articlesAdded = await aggregator.syncFeed(feed.id)
        totalArticles += articlesAdded
        successCount++
        
        console.log(`   ‚úÖ Sucesso: ${articlesAdded} novos artigos`)
        
        // Verificar se o lastSyncAt foi atualizado
        const updatedFeed = await prisma.feed.findUnique({
          where: { id: feed.id },
          select: { lastSyncAt: true }
        })
        
        console.log(`   üïí Novo lastSyncAt: ${updatedFeed?.lastSyncAt ? updatedFeed.lastSyncAt.toLocaleString('pt-BR') : 'AINDA NULL!'}`)
        console.log('')
        
      } catch (error: any) {
        errorCount++
        console.log(`   ‚ùå Erro: ${error.message}`)
        console.log('')
      }
    }

    console.log('üìä Resumo da sincroniza√ß√£o:')
    console.log(`   ‚Ä¢ Feeds processados: ${activeFeeds.length}`)
    console.log(`   ‚Ä¢ Sucessos: ${successCount}`)
    console.log(`   ‚Ä¢ Erros: ${errorCount}`)
    console.log(`   ‚Ä¢ Total de novos artigos: ${totalArticles}`)
    console.log('')

    // Verificar status final dos feeds
    console.log('üîç Verificando status final dos feeds...')
    const finalFeeds = await prisma.feed.findMany({
      where: { isActive: true },
      select: {
        name: true,
        lastSyncAt: true
      },
      orderBy: { name: 'asc' }
    })

    const syncedFeeds = finalFeeds.filter(f => f.lastSyncAt !== null)
    const nullFeeds = finalFeeds.filter(f => f.lastSyncAt === null)

    console.log(`‚úÖ Feeds com lastSyncAt atualizado: ${syncedFeeds.length}/${finalFeeds.length}`)
    if (nullFeeds.length > 0) {
      console.log(`‚ö†Ô∏è  Feeds ainda com lastSyncAt null: ${nullFeeds.length}`)
      nullFeeds.forEach(feed => {
        console.log(`   - ${feed.name}`)
      })
    }

  } catch (error: any) {
    console.error('‚ùå Erro durante sincroniza√ß√£o for√ßada:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

forceSyncFeeds()